import os
import PyPDF2
import fitz  # PyMuPDF
import docx
from oletools.olevba import VBA_Parser
from PIL import Image
import stegano
from joblib import load
import argparse

def analyze_pdf(file_path):
    print(f"Analyzing PDF file: {file_path}")
    with open(file_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        num_pages = len(reader.pages)
        print(f"Number of pages: {num_pages}")
        
        for i in range(num_pages):
            page = reader.pages[i]
            text = page.extract_text()
            # Add analysis logic for extracted text
            print(f"Page {i + 1} text: {text}")

def analyze_docx(file_path):
    print(f"Analyzing DOCX file: {file_path}")
    doc = docx.Document(file_path)
    for paragraph in doc.paragraphs:
        print(paragraph.text)
        # Add analysis logic for text

    vbaparser = VBA_Parser(file_path)
    if vbaparser.detect_vba_macros():
        print("Macros found!")
        for (filename, stream_path, vba_filename, vba_code) in vbaparser.extract_macros():
            print(f"VBA Filename: {vba_filename}")
            print(vba_code)
            # Add analysis logic for macros

def analyze_image(file_path):
    print(f"Analyzing image file: {file_path}")
    img = Image.open(file_path)
    print(f"Image format: {img.format}")
    print(f"Image size: {img.size}")
    # Add analysis logic for image metadata and content

    hidden_message = stegano.lsb.reveal(file_path)
    if hidden_message:
        print(f"Hidden message found: {hidden_message}")
        # Add analysis logic for hidden message

def detect_file_type(file_path):
    _, file_extension = os.path.splitext(file_path)
    return file_extension.lower()

def analyze_file(file_path):
    file_type = detect_file_type(file_path)
    if file_type == '.pdf':
        analyze_pdf(file_path)
    elif file_type == '.docx':
        analyze_docx(file_path)
    elif file_type in ['.jpg', '.jpeg', '.png']:
        analyze_image(file_path)
    else:
        print(f"Unsupported file type: {file_type}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Detect malicious files')
    parser.add_argument('FILE', help='File to be tested')
    args = parser.parse_args()

    analyze_file(args.FILE)
