import os
import PyPDF2
import fitz  # PyMuPDF
import docx
from oletools.olevba import VBA_Parser
from PIL import Image
import stegano
from joblib import load
import argparse

from sklearn.ensemble import RandomForestClassifier
from joblib import dump

# Example model training (replace with your own training code)
X_train = [[0, 0], [1, 1]]
y_train = [0, 1]
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Save the model to a file
dump(model, 'model.pkl')


def load_model():
    model = load('models/model.pkl')  # Ensure this is the correct path to your model file
    return model

def extract_features(file_path):
    features = []
    file_type = detect_file_type(file_path)
    
    if file_type == '.pdf':
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            num_pages = len(reader.pages)
            features.append(num_pages)
            # Check for JavaScript in PDF
            for i in range(num_pages):
                page = reader.pages[i]
                if '/JS' in page.get('/Resources', {}):
                    features.append(1)  # Indicate presence of JavaScript
                    break
            else:
                features.append(0)  # No JavaScript found

    elif file_type == '.docx':
        doc = docx.Document(file_path)
        num_paragraphs = len(doc.paragraphs)
        features.append(num_paragraphs)
        vbaparser = VBA_Parser(file_path)
        if vbaparser.detect_vba_macros():
            features.append(1)  # Indicate presence of macros
        else:
            features.append(0)  # No macros found

    elif file_type in ['.jpg', '.jpeg', '.png']:
        img = Image.open(file_path)
        features.append(img.size[0])  # Width
        features.append(img.size[1])  # Height
        hidden_message = stegano.lsb.reveal(file_path)
        if hidden_message:
            features.append(1)  # Indicate presence of hidden message
        else:
            features.append(0)  # No hidden message found
    
    # Add additional file type analyses here if needed

    return features

def predict_malicious(file_path, model):
    features = extract_features(file_path)
    prediction = model.predict([features])
    return prediction

def analyze_pdf(file_path):
    print(f"Analyzing PDF file: {file_path}")
    with open(file_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        num_pages = len(reader.pages)
        print(f"Number of pages: {num_pages}")
        for i in range(num_pages):
            page = reader.pages[i]
            text = page.extract_text()
            print(f"Page {i + 1} text: {text}")

def analyze_docx(file_path):
    print(f"Analyzing DOCX file: {file_path}")
    doc = docx.Document(file_path)
    for paragraph in doc.paragraphs:
        print(paragraph.text)
    
    vbaparser = VBA_Parser(file_path)
    if vbaparser.detect_vba_macros():
        print("Macros found!")
        for (filename, stream_path, vba_filename, vba_code) in vbaparser.extract_macros():
            print(f"VBA Filename: {vba_filename}")
            print(vba_code)
            if "AutoOpen" in vba_code or "AutoExec" in vba_code:
                print("Potentially malicious macro detected based on heuristic analysis.")
    else:
        print("No macros found.")

def analyze_image(file_path):
    print(f"Analyzing image file: {file_path}")
    img = Image.open(file_path)
    print(f"Image format: {img.format}")
    print(f"Image size: {img.size}")
    
    hidden_message = stegano.lsb.reveal(file_path)
    if hidden_message:
        print(f"Hidden message found: {hidden_message}")

def detect_file_type(file_path):
    _, file_extension = os.path.splitext(file_path)
    return file_extension.lower()

def analyze_file(file_path):
    file_type = detect_file_type(file_path)
    if file_type == '.pdf':
        analyze_pdf(file_path)
    elif file_type == '.docx':
        analyze_docx(file_path)
    elif file_type in ['.jpg', '.jpeg', '.png']:
        analyze_image(file_path)
    else:
        print(f"Unsupported file type: {file_type}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Detect malicious files')
    parser.add_argument('FILE', help='File to be tested')
    args = parser.parse_args()

    model = load_model()
    prediction = predict_malicious(args.FILE, model)
    if prediction == 1:
        print(f"The file {args.FILE} is predicted to be malicious.")
    else:
        print(f"The file {args.FILE} is predicted to be benign.")

    analyze_file(args.FILE)
